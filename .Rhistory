load("C:/Users/Guo/Desktop/Update/RPEXE.RPEXT-master/RPEXE.RPEXT-master/Data/simple.rdata")
View(simple)
?RPEXE.RPEXT
??RPEXE.RPEXT
load("C:/Users/Guo/Desktop/Update/RPEXE.RPEXT-master/Data/data2.rdata")
View(data2)
load("C:/Users/Guo/Desktop/Update/RPEXE.RPEXT-master/Data/df.rdata")
View(df)
?RPEXE.RPEXT
??RPEXE.RPEXT
pbeta(0.5,1,1)
pbeta(0.3,1,1)
pbeta(0.8,1,1)
load("C:/Users/Guo/Desktop/Update/RPEXE.RPEXT-master/Data/data2.rdata")
View(data2)
load("C:/Users/Guo/Desktop/Update/RPEXE.RPEXT-master/Data/df.rdata")
View(df)
array(0,c(1,0,1,2,3),1)
l=array(0,c(1,0,1,2,3),1)
l=array(0,c(5),1)
structtime <- c(0.05,0.64)
structgamindi=array(0,c(length(structtime),1))
View(structgamindi)
l=array(0,c(5),1))
structgamindi=array(0,c(length(structtime),1))
structgamindi=array(0,c(length(structtime),1)
structgamindi=array(0,c(length(structtime),1)
structgamindi=array(0,c(length(structtime),1)
structgamindi=array(0,c(length(structtime),1))
structgamindi=array(0,c(length(structtime),1))
l=array(0,c(5),1))
l=array(0,c(5),1)
array(0,2,1)
array(0,2,1))
array(0,2,1)
array(0,2)
x=array(0,2)
View(structgamindi)
x
structgamindi
time_die <- c(0.05,0.08,0.38,0.41,0.64)
structgampar=array(0,c(length(time_die),1))
View(structgampar)
structgampar[0]
structgampar[1]
structgampar[5]
structgampar[0]
structgampar[10]
structgampar[6]
structgampar[5]
structgampar[1]
?dgamma
t1 <- c(2,3,4,5.5,7,10,12,15)
c1 <- c(0,0,1,0,0,1,0,0)
x1<-cbind(t1,c1)
x = x1[order(x[,1]),]
# sort data by survival time
x = x1[order(x1[,1]),]
View(x)
# table of patients observed for each survival time
# the TABULATE function sets up this matrix:
# table1=[time count]
# get frequent list for survival time
frequent <- table(x[,1])
frequent
y <- matrix(c(as.numeric(names(frequent)), frequent), ncol=2, byrow=FALSE,
dimnames=NULL)
View(y)
table1 = rbind(c(0,sum(y[,2])),y)
View(table1)
cenData = x[which(x[,2]==0)]
freqCen <- table(cenData)
?dim
x <- 1:12 ; dim(x) <- c(3,4)
x
load("C:/Users/Guo/Desktop/Update/RPEXE.RPEXT-master/Data/t100.rdata")
t100
load("C:/Users/Guo/Desktop/Update/RPEXE.RPEXT-master/Data/pexeest_times_censoring.rdata")
View(pexeest_times_censoring)
load("C:/Users/Guo/Desktop/Update/RPEXE.RPEXT-master/Data/loopcuts_cut.rdata")
load("C:/Users/Guo/Desktop/Update/RPEXE.RPEXT-master/Data/loopcuts_t_c.rdata")
load("C:/Users/Guo/Desktop/Update/RPEXE.RPEXT-master/Data/loopcuts_t_c.rdata")
#Set up ts and pvalues
cutlen=100
ts=array(0,c(cutlen,1))
View(ts)
View(ts)
reverse_dependencies_with_maintainers <-
function(packages, which = c("Depends", "Imports", "LinkingTo"),
recursive = FALSE)
{
contrib.url(getOption("repos")["CRAN"], "source")
## trigger chooseCRANmirror() if required, so it's usable here:
description <- sprintf("%s/web/packages/packages.rds",
getOption("repos")["CRAN"])
con <- if(substring(description, 1L, 7L) == "file://")
file(description, "rb")
else
url(description, "rb")
on.exit(close(con))
db <- readRDS(gzcon(con))
rownames(db) <- NULL
rdepends <- tools::package_dependencies(packages, db, which,
recursive = recursive,
reverse = TRUE)
rdepends <- sort(unique(unlist(rdepends)))
pos <- match(rdepends, db[, "Package"], nomatch = 0L)
db[pos, c("Package", "Version", "Maintainer")]
}
reverse_dependencies_with_maintainers(RPEXE.RPEXT)
reverse_dependencies_with_maintainers()
reverse_dependencies_with_maintainers(ggplot2)
reverse_dependencies_with_maintainers("RPEXE.RPEXT")
reverse_dependencies_with_maintainers("ggplot2")
devtools::check()
library(RPEXE.RPEXT)
time = (2,3,4,5.5,7,10,12,15)
censor =  (0,0,1,0,0,1,0,0)
time = (2,3,4,5.5,7,10,12,15)
censor =(0,0,1,0,0,1,0,0)
time = c(2,3,4,5.5,7,10,12,15)
censor =c(0,0,1,0,0,1,0,0)
totaltest(time,censor)
totaltest(time,censor)
time = c(2,3,4,5.5,7,10,12,15)
censor =c(0,0,1,0,0,1,0,0)
sew=rep(0, length(time))
for(i in 1:length(time))
sew[i]=i
tmpdata=cbind(sew,censor,time)
tmp2 = tmpdata[order(time),]
tmp2 = cbind(tmp2,rep(0,dim(tmp2)[1]))
tmp_sort = cbind(tmp2[,3], 1-tmp2[,2])
tmp_sort2 = tmp_sort[order(tmp_sort[,1],tmp_sort[,2]),]
tmp_sort2[,2] = 1-tmp_sort2[,2]
tmp2[,3] = tmp_sort2[,1]
tmp2[,2] = tmp_sort2[,2]
View(tmp2)
time = c(4,5,6,6,7,7,7,9,9,10,10,11,11,15,17,17,19,21,21,22,23,25,26,30,31,34,37,37,38,42,42,47,48,48,50,51,52,53,60,61,64,65,66,68,74,76,81,88,88,90)
censor =c(1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0)
totaltest(time,censor)
totaltest(time,censor)
time = c(4,5,6,6,7,7,7,9,9,10,10,11,11,15,17,17,19,21,21,22,23,25,26,30,31,34,37,37,38,42,42,47,48,48,50,51,52,53,60,61,64,65,66,68,74,76,81,88,88,90)
censor =c(1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0)
totaltest(time,censor)
totaltest(time,censor)
library(RPEXE.RPEXT)
time = c(4,5,6,6,7,7,7,9,9,10,10,11,11,15,17,17,19,21,21,22,23,25,26,30,31,34,37,37,38,42,42,47,48,48,50,51,52,53,60,61,64,65,66,68,74,76,81,88,88,90)
censor =c(1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0)
totaltest(time,censor)
totaltest <- function(time,censor)
{
#save the data in the orginal structure
sew=rep(0, length(time))
for(i in 1:length(time))
sew[i]=i
tmpdata=cbind(sew,censor,time)
# sort the tmp data
tmp2 = tmpdata[order(time),]
tmp2 = cbind(tmp2,rep(0,dim(tmp2)[1]))
# make sure events appear before censoring;
tmp_sort = cbind(tmp2[,3], 1-tmp2[,2])
tmp_sort2 = tmp_sort[order(tmp_sort[,1],tmp_sort[,2]),]
tmp_sort2[,2] = 1-tmp_sort2[,2]
tmp2[,3] = tmp_sort2[,1]
tmp2[,2] = tmp_sort2[,2]
#Compute alpha's for the sequence
for (i in 1:dim(tmp2)[1])
{
if (tmp2[i,2]==0)
tmp2[i,4]=0
else
tmp2[i,4]=1
}
#Deal with alpha > 1
for (i in 1:(dim(tmp2)[1]-1))
if (tmp2[dim(tmp2)[1]+1-i,3]== tmp2[dim(tmp2)[1]-i,3])
{
tmp2[dim(tmp2)[1]-i,4]= tmp2[dim(tmp2)[1]-i,4] + tmp2[dim(tmp2)[1]+1-i,4]
tmp2[dim(tmp2)[1]+1-i,4]=0
}
# Delete the repeats
k=as.null()
for (i in 1:dim(tmp2)[1])
if (tmp2[i,2] == 1&tmp2[i,4]==0)
k[length(k)+1]=i
tmp3 = tmp2
if (length(k)!=0)
tmp3=tmp3[-k,]
tmp3 = cbind(tmp3,rep(0,dim(tmp3)[1]))
#Compute the number of patients in the study
for(i in 1:dim(tmp3)[1])
{
if (tmp3[i,4]==0)
tmp3[i,5]= 1
else
tmp3[i,5]= tmp3[i,4]
}
tmp3 = cbind(tmp3,rep(0,dim(tmp3)[1]))
for(i in 1:dim(tmp3)[1]-1)
{
tmp3[i,6]= sum(tmp3[,5])-sum(tmp3[1:i,5])
tmp3[dim(tmp3)[1],6]= 0
}
#Compute the survival time of this cohort
tmp3 = cbind(tmp3,rep(0,dim(tmp3)[1]))
for(i in 1:dim(tmp3)[1])
{
if (i==1)
tmp3[i,7]= sum(tmp3[,5])*tmp3[i,3]
else
###survival time == patient number * time difference
tmp3[i,7] = tmp3[i-1,6]* (tmp3[i,3]-tmp3[i-1,3])
}
tmp3 = cbind(tmp3,rep(0,dim(tmp3)[1]))
tmp3[,8] = tmp3[,7]
for (i in 1:dim(tmp3)[1])
if (tmp3[i,2]==0)
{
if (t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]>0)
tmp3[i+1,8] = tmp3[i,8]+tmp3[i+1,8]
if (t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]==0 && tmp3[i-1,2]!=0)
{
### put all the credit to the last noncensered data
k = length(tmp3[i:dim(tmp3)[1],2])
for (j in 1:k)
tmp3[i-1,8] = tmp3[i-1,8]+tmp3[i-1+j,8]
}
}
#Build the survival reaction
tmp3 = cbind(tmp3,rep(0,dim(tmp3)[1]))
tmp3[,9] = tmp3[,6]
for (i in 2:length(tmp3[,9]))
tmp3[i,9]= tmp3[i-1,9]-tmp3[i,4]
#plot (tmp3[,3],tmp3[,9])
###delete all the censered items
k=as.null()
for (i in 1:length(tmp3[,1]))
if (tmp3[i,2]== 0)
k[length(k)+1]=i
tmp4 = tmp3
if (length(k)!=0)
tmp4=tmp4[-k,]
time_die=tmp4[,3]
ttot=  tmp4[,8]
deaths=  tmp4[,5]
returnv=cbind(time_die,ttot,deaths)
return(returnv)
}
time = c(4,5,6,6,7,7,7,9,9,10,10,11,11,15,17,17,19,21,21,22,23,25,26,30,31,34,37,37,38,42,42,47,48,48,50,51,52,53,60,61,64,65,66,68,74,76,81,88,88,90)
censor =c(1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0)
totaltest(time,censor)
time = c(4,5,6,6,7,7,7,9,9,10,10,11,11,15,17,17,19,21,21,22,23,25,26,30,31,34,37,37,38,42,42,47,48,48,50,51,52,53,60,61,64,65,66,68,74,76,81,88,88,90)
censor =c(1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0)
totaltest(time,censor)
devtools::check()
usethis::use_version()
usethis::use_news_md()
devtools::build()
devtools::build()
getwd()
devtools::load_all()
time = c(4,5,6,6,7,7,7,9,9,10,10,11,11,15,17,17,19,21,21,22,23,25,26,30,31,34,37,37,38,42,42,47,48,48,50,51,52,53,60,61,64,65,66,68,74,76,81,88,88,90)
censor =c(1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0)
totaltest(time,censor)
RPEXEv1_2(time, censor, monotone = 1,criticalp=0.05, pos = 0)
load("C:/Users/Guo/Desktop/Update/COPY/RPEXE.RPEXT-master/Data/data2.rdata")
View(data2)
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(RPEXE.RPEXT)
remove.packages("RPEXE.RPEXT", lib="~/R/win-library/3.6")
devtools::build()
install.packages("RPEXE.RPEXT_0.0.2.tar.gz", repos = NULL)
install.packages("RPEXE.RPEXT_0.0.2.tar.gz", repos = NULL)
getwd()
setwd("C:/Users/Guo/Desktop/Update/COPY")
install.packages("RPEXE.RPEXT_0.0.2.tar.gz", repos = NULL)
library(RPEXE.RPEXT)
time = c(4,5,6,6,7,7,7,9,9,10,10,11,11,15,17,17,19,21,21,22,23,25,26,30,31,34,37,37,38,42,42,47,48,48,50,51,52,53,60,61,64,65,66,68,74,76,81,88,88,90)
censor =c(1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0)
totaltest(time,censor)
RPEXEv1_2(time, censor, monotone = 1,criticalp=0.05, pos = 0)
??RPEXE.RPEXT
??RPEXE.RPEXT
??RPEXE.RPEXT
devtools::check()
library(RPEXE.RPEXT)
remove.packages("RPEXE.RPEXT", lib="~/R/win-library/3.6")
devtools::build()
setwd("C:/Users/Guo/Desktop/Update/COPY")
install.packages("RPEXE.RPEXT_0.0.2.tar.gz", repos = NULL)
time = c(4,5,6,6,7,7,7,9,9,10,10,11,11,15,17,17,19,21,21,22,23,25,26,30,31,34,37,37,38,42,42,47,48,48,50,51,52,53,60,61,64,65,66,68,74,76,81,88,88,90)
censor =c(1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0)
totaltest(time,censor)
RPEXEv1_2(time, censor, monotone = 1,criticalp=0.05, pos = 0)
devtools::check()
devtools::check()
devtools::check()
devtools::build()
setwd("C:/Users/Guo/Desktop/Update/COPY")
remove.packages("RPEXE.RPEXT", lib="~/R/win-library/3.6")
install.packages("RPEXE.RPEXT_0.0.2.tar.gz", repos = NULL)
?RPEXE.RPEXT
library(RPEXE.RPEXT)
?RPEXE.RPEXT
??RPEXE.RPEXT
devtools::check()
library(RPEXE.RPEXT)
remove.packages("RPEXE.RPEXT", lib="~/R/win-library/3.6")
install.packages("RPEXE.RPEXT")
library(RPEXE.RPEXT)
data(simple)
times = simple[,2]
cens  = simple[,1]
result = RPEXEv1_2(times,cens,monotone = 3,criticalp = 0.05)
ID_nan = which(is.na(times))
times = times[-ID_nan]
censor = censor[-ID_nan]
group = group[-ID_nan]
armsA_ID = which(group == 1)
armsB_ID = which(group == 2)
data(data2)
times = data2[,1]
censor = data2[,2]
group = data2[,3]
ID_nan = which(is.na(times))
times = times[-ID_nan]
censor = censor[-ID_nan]
group = group[-ID_nan]
armsA_ID = which(group == 1)
armsB_ID = which(group == 2)
km(times[armsA_ID], censor[armsA_ID], 0)
km_red(times[armsA_ID], censor[armsA_ID], 1)
km(times[armsB_ID], censor[armsB_ID], 0)
km_red(times[armsB_ID], censor[armsB_ID], 0)
x1 = cbind(times[armsA_ID], censor[armsA_ID])
x2 = cbind(times[armsB_ID], censor[armsB_ID])
km_combine(x1,x2)
pexeoutA     =  RPEXEv1_2(times[armsA_ID],censor[armsA_ID], monotone = 1,criticalp = 0.05)
pexeoutB     =  RPEXEv1_2(times[armsB_ID],censor[armsB_ID],monotone = 1,criticalp = 0.05)
pexeout = RPEXEv1_2(times,censor,monotone = 1,criticalp = 0.05)
returnvB=totaltest(times[armsB_ID],censor[armsB_ID])
m=dim(returnvB)[2]/3
time_dieB=returnvB[,1:m]
ttotB=returnvB[,(m+1):(2*m)]
deathsB=returnvB[,(2*m+1):3*m]
ttotA1 = 0
ttotA2 = 0
ttotA3 = 0
dA1 = 0
dA2 = 0
dA3 = 0
for (i in 1:length(time_dieA))
{
if ( time_dieA[i]<=2.777)
{
ttotA1 = ttotA1+ttotA[i]
dA1    = dA1+deathsA[i]
}else if (time_dieA[i]<=8.959)
{
ttotA2 = ttotA2+ttotA[i]
dA2    = dA2+deathsA[i]
} else
{
ttotA3 = ttotA3+ttotA[i]
dA3    = dA3+deathsA[i]
}
}
ttotB1 = 0
ttotB2 = 0
ttotB3 = 0
dB1 = 0
dB2 = 0
dB3 = 0
for (i in 1:length(time_dieB))
{
if ( time_dieB[i]<=2.777)
{
ttotB1 = ttotB1+ttotB[i]
dB1    = dB1+deathsB[i]
}else if (time_dieB[i]<=8.959)
{
ttotB2 = ttotB2+ttotB[i]
dB2    = dB2+deathsB[i]
} else
{
ttotB3 = ttotB3+ttotB[i]
dB3    = dB3+deathsB[i]
}
}
returnvA=totaltest(times[armsA_ID],censor[armsA_ID])
m=dim(returnvA)[2]/3
time_dieA=returnvA[,1:m]
ttotA=returnvA[,(m+1):(2*m)]
deathsA=returnvA[,(2*m+1):3*m]
returnvB=totaltest(times[armsB_ID],censor[armsB_ID])
m=dim(returnvB)[2]/3
time_dieB=returnvB[,1:m]
ttotB=returnvB[,(m+1):(2*m)]
deathsB=returnvB[,(2*m+1):3*m]
ttotA1 = 0
ttotA2 = 0
ttotA3 = 0
dA1 = 0
dA2 = 0
dA3 = 0
for (i in 1:length(time_dieA))
{
if ( time_dieA[i]<=2.777)
{
ttotA1 = ttotA1+ttotA[i]
dA1    = dA1+deathsA[i]
}else if (time_dieA[i]<=8.959)
{
ttotA2 = ttotA2+ttotA[i]
dA2    = dA2+deathsA[i]
} else
{
ttotA3 = ttotA3+ttotA[i]
dA3    = dA3+deathsA[i]
}
}
ttotB1 = 0
ttotB2 = 0
ttotB3 = 0
dB1 = 0
dB2 = 0
dB3 = 0
for (i in 1:length(time_dieB))
{
if ( time_dieB[i]<=2.777)
{
ttotB1 = ttotB1+ttotB[i]
dB1    = dB1+deathsB[i]
}else if (time_dieB[i]<=8.959)
{
ttotB2 = ttotB2+ttotB[i]
dB2    = dB2+deathsB[i]
} else
{
ttotB3 = ttotB3+ttotB[i]
dB3    = dB3+deathsB[i]
}
}
result=exact_pvalue(ttotA1,ttotB1,dA1,dB1,0)
a11 = result[1]
p11 = result[2]
p11
result=exact_pvalue(ttotA2,ttotB2,dA2,dB2,0)
a12 = result[1]
p12 = result[2]
p12
result=exact_pvalue(ttotA3,ttotB3,dA3,dB3,0)
a13 = result[1]
p13 = result[2]
p13
result=exact_pvalue(ttotA1,ttotB1,dA1,dB1,1)
a21 = result[1]
p21 = result[2]
p21
result=exact_pvalue(ttotA2,ttotB2,dA2,dB2,1)
a22 = result[1]
p22 = result[2]
p22
result=exact_pvalue(ttotA3,ttotB3,dA3,dB3,1)
a23 = result[1]
p23 = result[2]
p23
